Agenda
------------
1. Introduction to Servlets: Understand the basics of servlets, their role in web development, and their advantages over traditional CGI scripts.

2. Servlet API: Familiarize yourself with the Servlet API, including the servlet lifecycle, request and response objects, and the javax.servlet package.

3. Servlet Configuration: Learn how to configure servlets using deployment descriptors (web.xml) or annotations (Java EE 6+).

4. Handling HTTP Requests: Explore different methods for handling various HTTP request types (GET, POST, PUT, DELETE) and extracting data from request parameters.

5. Handling HTTP Responses: Understand how to construct HTTP responses, set response headers, and send data back to the client.

6. Session Management: Learn about session tracking techniques, such as using cookies or URL rewriting, to maintain session state between requests.

7. Request and Session Attributes: Understand how to store and retrieve data in request and session scopes, and their differences.

8. Servlet Filters: Explore the concept of servlet filters, which intercept requests and responses to perform pre-processing or post-processing tasks.

9. Servlet Context: Learn about the servlet context and how to share data and resources across servlets using the ServletContext object.

10. Error Handling: Understand how to handle and display custom error pages for different HTTP error codes and exceptions.

11. File Upload and Download: Learn how to handle file uploads from clients and enable file downloads using servlets.

12. Redirects and Forwarding: Understand the difference between redirects and forwarding, and when to use each technique.

13. Authentication and Authorization: Explore techniques for user authentication and authorization using servlets, such as using servlet filters or integrating with Java EE security mechanisms.

14. Asynchronous Servlets: Learn how to handle long-running tasks efficiently using asynchronous servlets and the Servlet 3.0+ async API.

15. Servlet Containers and Deployment: Understand how servlets are deployed in servlet containers, such as Apache Tomcat or Jetty, and learn about deployment descriptors and container-specific configuration.

16. Servlet Best Practices: Explore best practices for writing efficient, scalable, and maintainable servlet code, including code organization, exception handling, and performance optimization.

17. JavaServer Pages (JSP): Get an introduction to JSP and understand how servlets can be combined with JSP for dynamic web page generation.

18. MVC Frameworks: Gain an overview of popular Java-based MVC (Model-View-Controller) frameworks, such as Spring MVC or JavaServer Faces (JSF), that utilize servlets for web application development.


Introcuction
--------------------
0. What is the web application
	- Web app is an application that can be run over the internet through the browser.
	- Web application can have multiple web pages, images, and other type of files.
1. How typical web application works
2. Explain the Request/ Response cycle
3. Explain what are the client and server
4. Components of web application
	1. Client 
	2. Server
	3. Database
	4. Static Resources - The files or resource that doesn't require any processing.
		1. html files
		2. css files
		3. js filters
		4. image
		5. pdf
	5. Dynamic Resources - The files that need to be processed before sending to the client.
		1. Servlets
		2. JSP
		
5. How Static Resources are processed
6. How Dynamic Resources are processed.
7. Server
		- web server (Apache Tomcat)
			- Servlet/jsp engine / container
			-JDK
		- Database Server

Servlet
	- What is the servlet
		1. Servlets are Java-based server-side components that dynamically generate web content and handle client requests.
		2. They provide a way to create dynamic web applications by extending the functionality of web servers.
		3. Servlets are part of the Java Servlet API, which is a specification that defines how servlets should behave and interact with the web server.

Important Servlet Terms
--------------------------
	-Servlet Lifecycle
		Servlets have a well-defined lifecycle consisting of several stages, including initialization, request handling, and destruction. The container manages the lifecycle and ensures that servlet instances are created and destroyed as needed.
	- Servlet API: 
		The Servlet API provides a set of classes and interfaces that servlets use to interact with the servlet container. It includes classes for handling requests and responses, managing sessions, accessing servlet context, and more.
	- Deployment and Configuration: 
		Servlets are deployed as part of a web application, which typically consists of multiple servlets, along with other resources like HTML, CSS, and JavaScript files. 
		
		Deployment can be done using deployment descriptors (web.xml) or through annotations (Java EE 6+). Configuration options such as URL mappings and initialization parameters can be specified.

Installation of Tomcat
---------------------------

1. Tomcat home: 
2. Important Jar
	-----------------
		- servlet-api.jar
		- jsp-api.jar
		- el-api.jar
		- tomcat-dhcp.jar
3. Summary of tomcat directories
------------------------------------
1. bin: Contains the executable files and scripts for starting, stopping, and managing Tomcat server instances. It includes files like startup.bat (or startup.sh for Unix-based systems) and shutdown.bat (or shutdown.sh).

2. conf: Contains configuration files for Tomcat. The main file is server.xml, which configures the server-specific settings like ports, connectors, and global resources. Other files include web.xml for default web application settings and various XML files for configuring realms, security, and logging.

3. lib: Contains Java Archive (JAR) files required by Tomcat and its web applications. It includes Tomcat's own libraries and dependencies that provide additional functionality. You can also place third-party libraries in this directory that should be shared across multiple web applications.

4. logs: Contains log files generated by Tomcat, including catalina.out, which contains standard output and error messages. It also includes access logs, which record details about incoming requests and other log files for different components.

5. webapps: This directory is the default location for deploying web applications. Each web application is typically placed in a separate directory under the webapps directory. When Tomcat starts, it automatically deploys the web applications found in this directory.

6. work: Temporary directory used by Tomcat for storing compiled JSPs, cached classes, and other temporary files generated during runtime. It is recommended not to modify or delete files in this directory manually.

7. temp: Another temporary directory used by Tomcat for storing temporary files that are not related to specific web applications. It can include uploaded files, session data, and other temporary data. Like the work directory, it is advisable not to modify or delete files in this directory manually.


Tomcat Configuration
-------------------------
0. Set the JRE_HOME or JAVA_HOME environment variable with Java path
1. What is the port
2. How to change the port -> Tomcat dirctory-> conf -> sever.xml -> change 8080
3. How to create tomcat-users and access the manage-gui
--------------------------------------------------------------

Directory structure of J2EE application
---------------------------
|-- WEB-INF
|   |-- classes
|   |   |-- com
|   |   |   |-- example
|   |   |   |   |-- YourServlet.class
|   |   |-- other_class_files...
|   |
|   |-- lib
|   |   |-- servlet-api.jar
|   |   |-- other_dependency_jars...
|   |
|   |-- web.xml
|
|-- META-INF
|   |-- context.xml
|   |-- MANIFEST.MF
|
|-- index.html
|-- other_html_files...


Servlet
----------------
Example-1: Create a simple servlet, HelloServlet that prints Hello World.
Example-2: Convert the above servlet using Servlet Api 3.0
Example-3: Create a html form and show the user input using servlet.

JSP:
-------------
1. JSP (JavaServer Pages) is a technology used for creating dynamic web pages in Java-based web applications.
2. It allows you to mix HTML markup and Java code to generate dynamic content.
3. JSP pages are processed by the web server before being sent to the client's browser.
4. JSP allows you to embed Java code within the HTML markup using special tags such as <% %>, <%= %>, and <%! %>. These tags are used to execute Java code, evaluate expressions, and define variables or methods.
5. Implicit Objects: JSP provides several implicit objects that are available within JSP pages without requiring explicit declaration. 
Examples of implicit objects includes 
	- request, 
	- response, 
	- session, 
	- application, 
	- out, 
	- pageContext.



JSP Tags
----------------
JSP (JavaServer Pages) provides various tags that allow you to perform specific actions or control the flow of execution within a JSP page. Here are some commonly used JSP tags and their uses:

1. **Declaration Tags (`<%! ... %>`)**: Declaration tags are used to declare variables, methods, and other members that are accessible throughout the JSP page. They are typically placed at the beginning of the page.

2. **Scriptlet Tags (`<% ... %>`)**: Scriptlet tags allow you to embed Java code within the JSP page. You can use them to perform dynamic operations, calculations, or conditionals. The Java code inside the scriptlet is executed when the page is processed.

3. **Expression Tags (`<%= ... %>`)**: Expression tags are used to evaluate and display the value of an expression within the HTML markup. The expression can be a variable, a method call, or any valid Java expression. The result of the expression is automatically converted to a string and included in the HTML output.

4. **Directive Tags (`<%@ ... %>`)**: Directive tags are used to provide instructions to the JSP container about how to process the JSP page. They are typically used to import Java classes, define error handling pages, or set page-level attributes such as content type or session behavior.

5. **Include Directive (`<%@ include ... %>`)**: The include directive is used to include the content of another file into the current JSP page during the translation phase. It is useful for reusing common page elements or including external resources.

6. **Taglib Directive (`<%@ taglib ... %>`)**: The taglib directive is used to declare and import a tag library into the JSP page. It allows you to use custom tags provided by the tag library, extending the functionality of JSP. The directive specifies the location and prefix associated with the tag library.

7. **Action Tags (`<jsp:...>`)**: Action tags are used to invoke built-in actions or custom actions defined by tag libraries. They allow you to perform actions such as forwarding requests, including external files, handling exceptions, managing session attributes, and more.

8. **Expression Language (EL) Tags (`${ ... }`)**: The EL tags are not traditional JSP tags but are a simplified expression language syntax used within JSP pages. They allow you to evaluate expressions and retrieve values from objects, including request parameters, session attributes, and other implicit objects.


Example-4: Rewrite the Example-3 again with the use of only JSP
Example-5: Rewrite the Example-4 and store the data in a file called subscriber.txt
that should be created in WEB-INF directory.
Example-6: Rewrite the Example-5 with Servlet.

Servlet Life Cycle
--------------------------------------
The life cycle of a servlet refers to the series of stages that a servlet goes through, from its initialization to its destruction. 

1. **Initialization**: 
	During initialization, the servlet container creates an instance of the servlet and initializes it by calling the `init()` method. This method is called only once during the lifetime of the servlet. It is typically used to perform one-time setup tasks, such as loading configurations, establishing database connections, or initializing resources.

2. **Request Handling**: 
	Once the servlet is initialized, it is ready to handle client requests. For each incoming request, the servlet container calls the `service()` method of the servlet. The `service()` method determines the type of the request (GET, POST, etc.) and delegates the request to the appropriate method (`doGet()`, `doPost()`, etc.) based on the HTTP method.

3. **Request Processing**: 
	The servlet's request processing methods, such as `doGet()` and `doPost()`, handle the request-specific logic. These methods are responsible for processing the request parameters, performing business operations, generating dynamic content, and interacting with databases or other external resources.

4. **Response Generation**: 
	After the request processing is complete, the servlet generates the response to be sent back to the client. The response typically includes HTML content, JSON data, or other forms of output. The servlet sets the response headers, writes the response body, and may also perform redirects or set cookies.

5. **Destroying**: 
	The servlet container calls the `destroy()` method when it decides to remove the servlet from service. This typically occurs when the container is shutting down or when the servlet is being unloaded due to configuration changes or application redeployment. The `destroy()` method is used to release any resources held by the servlet, close database connections, or perform cleanup tasks.

Example-7:
	Create a servlet HitCounterServlet to count the incoming request to that srevlet
	and display the counter using a jsp page.

HttpServletRequest Methods
------------------------------
0. getHttpMethod(): String
1. **`getParameter(String name)`**: Retrieves the value of a request parameter specified by its name. It is commonly used to access form data or query parameters sent with the request.

2. **`getParameterValues(String name)`**: Retrieves an array of values for a request parameter specified by its name. This method is used when a parameter can have multiple values, such as checkboxes with the same name.

3. **`getServletContext()`**: Returns the `ServletContext` associated with the servlet.
4. request.getRequestDispatcher()

What is MVC
--------------
	M - Model
	V - Views
	C - Controllers

Set & Get Data(Attributes) in Request
---------------------
	- request.setAttribute(String key, Object val):void
	- request.getAttribute(String Key): Object

RequestDispatcher
--------------------
The RequestDispatcher interface in Java Servlet provides a way to forward a request from one servlet to another servlet or include the response of another servlet in the current response. It enables servlets to collaborate and share data during request processing.

The RequestDispatcher interface has two main methods:
	-forward(ServletRequest request, ServletResponse response)
	-include(ServletRequest request, ServletResponse response)

	Getting RequestDispatcher object & forware request
	---------------------------------------------------------
	// Inside the doPost() or doGet() method of Servlet1
	- RequestDispatcher dispatcher = request.getRequestDispatcher("/Servlet2");
	dispatcher.forward(request, response);


Response Redirect
--------------------
	- response.sendRedirect("/myapp/otherServlet");
Note:
	It's important to note that when a redirect is performed, the client browser makes a new request to the specified URL, and the request and response objects are recreated. Therefore, any data stored in request attributes or parameters will not be preserved across the redirect unless you explicitly pass them as query parameters or through session attributes.


Data validation
---------------------------
Explain the example of data validation 

Include a file in jsp
----------------------------
Compile time
<%@inlcude file="url" %>

Run time include
-------------------
<jsp:include page="url" />


Setting The error page / exception handler in configuration (web.xml)
-------------------------------------------------------
<web-app>
    <!-- Other configuration elements -->
    
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/errorPage.jsp</location>
    </error-page>
    
    <error-page>
        <error-code>404</error-code>
        <location>/notFound.jsp</location>
    </error-page>
    
    <!-- Other error-page mappings -->
</web-app>

Get the exception on exception page
------------------------------------------
<%@ page isErrorPage="true" %>
<%@ page import="java.io.*" %>
<%@ page import="java.util.*" %>
<%@ page import="javax.servlet.*" %>
<%@ page import="javax.servlet.http.*" %>
<html>
<head>
    <title>Error Page</title>
</head>
<body>
    <h1>Error Page</h1>
    <%
        Throwable exception = (Throwable) request.getAttribute("javax.servlet.error.exception");
        if (exception != null) {
            out.println("<p>An exception occurred: " + exception.getMessage() + "</p>");
        } else {
            out.println("<p>An error occurred.</p>");
        }
    %>
</body>
</html>




Setting error page using annotation
-------------------------------------------

@WebServlet(name = "MyServlet", urlPatterns = { "/myServlet" })
public class MyServlet extends HttpServlet {
    // Servlet code goes here
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Exception handling code goes here
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Exception handling code goes here
    }
    
    @Override
    public void init() throws ServletException {
        // Initialization code goes here
    }
    
    @Override
    public void destroy() {
        // Cleanup code goes here
    }
    
    @Override
    public String getServletInfo() {
        // Servlet information goes here
    }
    
    @Override
    public void service(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            // Servlet processing code goes here
        } catch (Exception e) {
            request.getRequestDispatcher("/errorPage.jsp").forward(request, response);
        }
    }
    
    @Override
    public void service(ServletRequest request, ServletResponse response)
            throws ServletException, IOException {
        service((HttpServletRequest) request, (HttpServletResponse) response);
    }
}

Initialization Parameter
--------------------------
Initialization parameters in servlets allow you to pass configuration values to your servlet at the time of initialization. These parameters can be defined in the deployment descriptor (web.xml) or using annotations. Initialization parameters provide a way to configure the behavior of your servlet without modifying its code. Here are the ways to define initialization parameters in a servlet:


Using web.xml (Deployment Descriptor):
In the web.xml file, you can define initialization parameters for a servlet using the <init-param> element within the <servlet> element. Here's an example:

<web-app>
  <!-- Other configuration elements -->
  <servlet>
    <servlet-name>MyServlet</servlet-name>
    <servlet-class>com.example.MyServlet</servlet-class>
    <init-param>
      <param-name>param1</param-name>
      <param-value>value1</param-value>
    </init-param>
    <init-param>
      <param-name>param2</param-name>
      <param-value>value2</param-value>
    </init-param>
  </servlet>
  <!-- Other servlet mappings -->
</web-app>


Using Annotations:
----------------------
With the Servlet API 3.0 and above, you can also use annotations to define initialization parameters directly in your servlet class. Here's an example:

@WebServlet(name = "MyServlet", urlPatterns = { "/myservlet" },
            initParams = {
                @WebInitParam(name = "param1", value = "value1"),
                @WebInitParam(name = "param2", value = "value2")
            })
public class MyServlet extends HttpServlet {
    // Servlet code goes here
}


Retrieve Init Parameter
------------------------------
To access the initialization parameters within the servlet, you can use the getInitParameter() method of the ServletConfig object. For example:


public void init(ServletConfig config) throws ServletException {
    super.init(config);
    
    String param1 = config.getInitParameter("param1");
    String param2 = config.getInitParameter("param2");
    
    // Use the initialization parameters
}


Context parameter
--------------------------

Context parameters, also known as servlet context parameters or application-wide parameters, allow you to define global configuration values for your entire web application. These parameters are accessible to all servlets, filters, and other components within the application. Context parameters are useful when you need to share common configuration values across multiple servlets or components.

Using web.xml (Deployment Descriptor):
-----------------------------------------

<web-app>
  <!-- Other configuration elements -->
  <context-param>
    <param-name>param1</param-name>
    <param-value>value1</param-value>
  </context-param>
  <context-param>
    <param-name>param2</param-name>
    <param-value>value2</param-value>
  </context-param>
</web-app>


Using Annotations:
--------------------------
	Will be explained later.



public void doGet(HttpServletRequest request, HttpServletResponse response) {
    ServletContext context = request.getServletContext();
    
    String param1 = context.getInitParameter("param1");
    String param2 = context.getInitParameter("param2");
    
    // Use the context parameters
}

State Management
------------------------
1. Query String
2. Cookie
3. Session
4. Hidden form field


Query String
-----------------------
Query is a way in which we can transfer data by passing in url in key and value pair.
This method is passing data similarly submitting the form by GET method.

Example: 
    /products.jsp?category=electronics
    /products.jsp?category=fan
    /products.jsp?category=mobile&company=samsung

How to retrieve data from URL
------------------------------------
URL data is always pushed on the request object so can be fetch from request.

request.getParameter("category"); // electronics/ fan/mobile
request.getParameter("company")/ // null / 


Session and Cookies
---------------------------

- How session tracking works in java
- Getting the session:
	HttpSession session = request.getSession();
-Setting session attributes:
	session.setAttribute("attributeName", attributeValue);
-Getting session attributes:
	Object attributeValue = session.getAttribute("attributeName");
-Removing session attributes:
	session.removeAttribute("attributeName");
-Invalidating the session:
	session.invalidate();
------------------------------------------

Other methods
----------------
-getId():
Returns the unique identifier assigned to the session.

-getCreationTime():
Returns the time (in milliseconds) when the session was created.

-getLastAccessedTime():
Returns the time (in milliseconds) when the session was last accessed by the client.

-setMaxInactiveInterval(int interval):
Sets the maximum time (in seconds) that the session can remain inactive before it is invalidated. A value of 0 or negative indicates that the session should never expire due to inactivity.

-getMaxInactiveInterval():
Returns the maximum time (in seconds) that the session can remain inactive before it is invalidated.

Example: Create an example to login and logout process to show the session demo.

Cookie
------------
A cookie is a small piece of data that a web server sends to a user's web browser and is stored on the user's computer. It is primarily used to track and store information about the user's interactions with a website.

In Java, you can create and use cookies using the `javax.servlet.http.Cookie` class provided by the Servlet API. Here's how you can create and use a cookie in Java:

1. Creating a cookie:
   To create a cookie, you instantiate a new `Cookie` object and provide the name and value of the cookie. Here's an example:

   Cookie cookie = new Cookie("cookieName", "cookieValue");

   In this example, a cookie named "cookieName" is created with the value "cookieValue".

2. Setting additional cookie properties:
   You can set additional properties for the cookie, such as the maximum age, domain, path, and whether it is secure or not. Here's an example:

   
   cookie.setMaxAge(3600); // Set the cookie's maximum age in seconds
   cookie.setDomain(".example.com"); // Set the domain for which the cookie is valid
   cookie.setPath("/"); // Set the path within the domain for which the cookie is valid
   cookie.setSecure(true); // Set whether the cookie should only be transmitted over HTTPS
   
   These properties allow you to control the lifespan, scope, and security of the cookie.

3. Adding the cookie to the response:
   To send the cookie to the client's browser, you add it to the response using the `addCookie()` method of the `HttpServletResponse` object. Here's an example:

   response.addCookie(cookie);
   
   The cookie will be included in the response headers and sent to the client's browser.

4. Retrieving cookies from the request:
   To retrieve cookies sent by the client's browser, you can use the `getCookies()` method of the `HttpServletRequest` object. Here's an example:

   Cookie[] cookies = request.getCookies();
   
   The `getCookies()` method returns an array of `Cookie` objects that were sent by the client.

5. Accessing cookie properties:
   You can access various properties of a cookie, such as its name, value, maximum age, and other attributes. Here's an example:

   String cookieName = cookie.getName();
   String cookieValue = cookie.getValue();
   int maxAge = cookie.getMaxAge();
   
   These properties allow you to retrieve and use the information stored in the cookie.

By creating and using cookies in Java, you can store and retrieve information on the client's browser, allowing you to maintain state and personalize user experiences in web applications.


Utitlity class to access the cookie value
----------------------------------------
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;

public class CookieUtils {
    public static String getCookie(HttpServletRequest request, String item) {
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie cookie : cookies) {
                if (cookie.getName().equals(item)) {
                    return cookie.getValue();
                }
            }
        }
        return null;
    }
}

-Example: Create and example of setting user preference or theme selected using java.



