JDBC (Java Database Connectivity) is a Java API that provides a standard interface for connecting Java applications to databases. Its primary purpose is to enable Java programs to interact with relational databases and perform database operations.

The main features of JDBC include:
    1. Database Connectivity:
    2. SQL Execution
    3. Parameterized Queries
    4. Retrieving Result Sets
    5. Transaction Management
    6. Database Metadata
    7. Exception Handling

JDBC Architecture:
    The JDBC architecture consists of several components that work together to establish a connection with the database, execute SQL statements, and handle the results. The key components are:

    1. JDBC API:

    The JDBC API provides a set of Java interfaces and classes that define the methods and classes used by Java applications to interact with databases.
    It includes interfaces such as Connection, Statement, PreparedStatement, CallableStatement, ResultSet, and various exception classes.

    2. JDBC Driver Manager:

    The Driver Manager is responsible for managing JDBC drivers.
    It locates and loads the appropriate JDBC driver based on the database URL provided by the application.
    The Driver Manager also manages multiple drivers and handles driver registration and deregistration.

    3. JDBC Drivers:

    JDBC drivers are implementations of the JDBC API that provide database-specific functionality for connecting to and interacting with databases.
    There are four types of JDBC drivers:
        Type 1: JDBC-ODBC Bridge driver (deprecated)
        Type 2: Native API partly Java driver
        Type 3: Network-protocol Java driver
        Type 4: Pure Java driver (recommended)

    4. Connection:

        The Connection interface represents a connection to a database.
        It is responsible for establishing a connection, creating statements, and managing transactions.
        The Connection object is obtained through the Driver Manager and is used to execute SQL statements and retrieve results.

    5. Statement and PreparedStatement:

    The Statement interface represents a static SQL statement that is executed directly against the database.
    PreparedStatement extends Statement and allows the use of parameterized queries.
    Both interfaces provide methods to execute SQL statements and retrieve results from the database.

    6. CallableStatement:

    The CallableStatement interface is used to execute stored procedures.
    It extends PreparedStatement and provides additional methods to handle stored procedure execution and retrieve results.

    7. ResultSet:

    The ResultSet interface represents the result of a database query, typically generated by executing a SELECT statement.
    It provides methods to navigate through the result set, retrieve column values, and obtain metadata about the result set.

    8. DatabaseMetaData:

    The DatabaseMetaData interface provides methods to retrieve metadata about the database, such as information about tables, columns, indexes, and constraints.
    It allows applications to dynamically retrieve and analyze database structure information.


In the context of JDBC, a driver refers to a software component that enables Java applications to connect and interact with a specific database management system (DBMS). The driver acts as a bridge between the Java application and the underlying database, translating the JDBC API calls into the DBMS-specific protocol for communication.

There are four types of JDBC drivers:

1. Type 1: JDBC-ODBC Bridge Driver:
   This type of driver uses the ODBC (Open Database Connectivity) API to connect to databases that have ODBC drivers installed. The JDBC-ODBC Bridge driver converts JDBC method calls into corresponding ODBC calls. However, this type of driver is becoming less common and is typically used for legacy systems.

+-------------------+                    +---------------------+                 +------------------------+
|   Java Application|                    |   JDBC-ODBC Bridge  |                 |   ODBC Driver Manager  |
+-------------------+                    +---------------------+                 +------------------------+
          |                                           |                                       |
          |    JDBC API Calls                         |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |
          |                                           |    ODBC API Calls                    |
          |                                           |-------------------------------------->|
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |<------------------------------------------|                                       |
          |                                           |                                       |
          |                                           |                                       |
          |                                           |    ODBC Driver Function Calls        |
          |                                           |<--------------------------------------|
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |

2. Type 2: Native-API Driver:
   A native-API driver uses a DBMS-specific client library or API to communicate with the database. It requires native code, specific to the DBMS, to be installed on the client machine. The driver communicates with the DBMS client library, which in turn interacts with the database.

+-------------------+                    +---------------------+                 +------------------------+
|   Java Application|                    |   JDBC Type 2 Driver|                 |   Native Database API  |
+-------------------+                    +---------------------+                 +------------------------+
          |                                           |                                       |
          |    JDBC API Calls                         |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |
          |                                           |   Native Database API Calls         |
          |                                           |-------------------------------------->|
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |<------------------------------------------|                                       |
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |


3. Type 3: Network Protocol Driver (Middleware Driver):
   A network protocol driver communicates with a middleware server that acts as an intermediate layer between the Java application and the DBMS. The middleware server converts the JDBC API calls into a DBMS-specific protocol and communicates with the actual database server.

+-------------------+                    +---------------------+                 +------------------------+
|   Java Application|                    |   JDBC Type 3 Driver|                 |   Database Server      |
+-------------------+                    +---------------------+                 +------------------------+
          |                                           |                                       |
          |    JDBC API Calls                         |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |
          |                                           |   Network Protocol Communication    |
          |                                           |-------------------------------------->|
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |<------------------------------------------|                                       |
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |


4. Type 4: Native Protocol Driver (Thin Driver):
   A native protocol driver, also known as a thin driver, directly communicates with the DBMS using the DBMS-specific network protocol. It doesn't require any additional software to be installed on the client machine. The thin driver converts the JDBC API calls into the DBMS-specific protocol and communicates directly with the database server.

+-------------------+                    +---------------------+                 +------------------------+
|   Java Application|                    |   JDBC Type 4 Driver|                 |   Database Server      |
+-------------------+                    +---------------------+                 +------------------------+
          |                                           |                                       |
          |    JDBC API Calls                         |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |
          |                                           |   Native Protocol Communication     |
          |                                           |-------------------------------------->|
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |<------------------------------------------|                                       |
          |                                           |                                       |
          |                                           |                                       |
          |    Results/Exceptions                     |                                       |
          |------------------------------------------>|                                       |
          |                                           |                                       |


The choice of driver type depends on the specific requirements of your application, the DBMS you are connecting to, and the available drivers for that DBMS. It's important to ensure that the driver you choose is compatible with both your Java version and the DBMS you are working with.

To use a JDBC driver in your Java application, you need to include the driver's JAR file in the classpath. 

Each JDBC driver has its own set of configuration parameters and connection URL format specific to the DBMS it supports. These details should be obtained from the driver's documentation or the DBMS vendor's documentation.


How to connect with database
--------------------------------
To connect to a database and perform operations using a Type 4 JDBC driver, follow these steps:

Step 1: Load the JDBC driver class
--------------------------------
- Before establishing a connection, you need to load the JDBC driver class provided by the database vendor. The driver class is usually provided in the form of a JAR file. Load the driver class using the `Class.forName()` method. For example:
    Class.forName("com.database.vendor.Driver");

    Example:
    Class.forName("com.mysql.jdbc.Driver");


Step 2: Establish a connection
    - Once the driver class is loaded, you can establish a connection to the database server using the `DriverManager.getConnection()` method. Provide the necessary connection details such as the database URL, username, and password. For example:

    String url = "jdbc:vendor://localhost:port/database";
    String username = "your_username";
    String password = "your_password";
    Connection connection = DriverManager.getConnection(url, username, password);


Step 3: Execute SQL queries
    - After establishing the connection, you can execute SQL queries against the database. Use the `Connection` object's `createStatement()` method to create a `Statement` object, and then use the `executeQuery()` method to execute a SELECT query or the `executeUpdate()` method to execute INSERT, UPDATE, DELETE, or DDL queries. For example:
    
    Statement statement = connection.createStatement();
    String sql = "SELECT * FROM table_name";
    ResultSet resultSet = statement.executeQuery(sql);


Step 4: Process the results
    - If you executed a SELECT query, you can retrieve the results from the `ResultSet` object. Use the appropriate getter methods based on the data types of the columns in the result set to retrieve the data. For example:

    while (resultSet.next()) {
        String column1 = resultSet.getString("column_name1");
        int column2 = resultSet.getInt("column_name2");
        // Process the retrieved data
    }


Step 5: Close the resources
- Once you have finished using the database connection and processing the results, make sure to close the resources properly. Close the `ResultSet`, `Statement`, and `Connection` objects in reverse order of their creation. For example:
```java
resultSet.close();
statement.close();
connection.close();
```

Remember to handle any exceptions that may occur during the process using try-catch blocks or by declaring them in the method signature.

By following these steps, you can connect to a database and perform various operations using a Type 4 JDBC driver in your Java application. Make sure to consult the documentation provided by the database vendor for specific details on configuring the connection URL, supported SQL syntax, and other database-specific information.


Example-1: Fetch the data from database
Example-2: Insert data into a database using Statement
Example-3: Insert data into a database using PreparedStatement


java.sql.DriverManager
------------------------
The `DriverManager` class in JDBC provides several methods to manage JDBC drivers and connections. Here are some of the commonly used methods of the `DriverManager` class:

1. `registerDriver(Driver driver)`: Registers a JDBC driver with the `DriverManager`. The driver instance provided as a parameter is added to the list of registered drivers that can be used to establish database connections.

2. `getConnection(String url)`: Attempts to establish a connection to the database using the given JDBC URL. The appropriate driver is automatically selected from the registered drivers based on the URL.

3. `getConnection(String url, String user, String password)`: Attempts to establish a connection to the database using the given JDBC URL, username, and password. The appropriate driver is selected based on the URL.

4. `getConnection(String url, Properties info)`: Attempts to establish a connection to the database using the given JDBC URL and connection properties. The properties can include username, password, and other driver-specific settings.

5. `getDrivers()`: Retrieves an enumeration of all the JDBC drivers registered with the `DriverManager`.

6. `getLoginTimeout()`: Retrieves the maximum time in seconds that the `DriverManager` waits while attempting to establish a database connection. If the timeout is exceeded, a `SQLException` is thrown.

7. `setLoginTimeout(int seconds)`: Sets the maximum time in seconds that the `DriverManager` waits while attempting to establish a database connection.

8. `deregisterDriver(Driver driver)`: Deregisters a JDBC driver from the `DriverManager`. The driver instance provided as a parameter is removed from the list of registered drivers.

These methods provide functionality to manage drivers and establish database connections in JDBC. Remember to handle `SQLException` and other exceptions that may occur when using these methods.

It's important to note that with the introduction of JDBC 4.0, the `DriverManager` class automatically detects and registers drivers through the service provider mechanism, so manually registering drivers using `registerDriver()` is generally not necessary in modern JDBC applications.

java.sql.Connection
------------------------
The `Connection` interface in JDBC represents a connection to a database. It provides methods to interact with the database and perform various operations. Here are some commonly used methods of the `Connection` class:

1. `createStatement()`: Creates a `Statement` object that can be used to execute SQL statements or queries on the database.

2. `prepareStatement(String sql)`: Prepares a SQL statement for execution. The SQL statement can contain parameters that can be set using the `PreparedStatement` object.

3. `prepareCall(String sql)`: Prepares a SQL call statement or stored procedure for execution. The SQL call statement can contain parameters that can be set using the `CallableStatement` object.

4. `close()`: Closes the connection to the database, releasing any resources associated with it.

5. `commit()`: Commits the current transaction in auto-commit mode. If the connection is not in auto-commit mode, this method is typically used to commit the changes explicitly.

6. `rollback()`: Rolls back the current transaction. If the connection is not in auto-commit mode, this method is used to roll back the changes explicitly.

7. `setAutoCommit(boolean autoCommit)`: Sets the auto-commit mode of the connection. When auto-commit is enabled, each SQL statement is treated as a separate transaction and automatically committed. When disabled, you need to call `commit()` or `rollback()` explicitly to manage transactions.

8. `isClosed()`: Checks if the connection to the database is closed.

9. `getMetaData()`: Retrieves the `DatabaseMetaData` object, which provides information about the database, such as supported features, tables, columns, etc.

10. `setReadOnly(boolean readOnly)`: Sets the read-only mode of the connection. When read-only is enabled, it indicates that the connection is used for read operations only, and attempts to modify data will result in an exception.


Statement Interface Methods
----------------------------
The `Statement` interface in JDBC represents a statement that can be executed against a database. It provides methods to execute SQL queries and statements, retrieve results, and perform other operations. Here are some commonly used methods of the `Statement` class:

1. `execute(String sql)`: Executes an SQL statement and returns a boolean indicating whether the statement returned a `ResultSet` or not. This method can be used to execute any SQL statement, including DDL and DML statements.

2. `executeQuery(String sql)`: Executes an SQL SELECT query and returns a `ResultSet` object containing the query results. Use this method when executing SELECT statements that return rows from the database.

3. `executeUpdate(String sql)`: Executes an SQL statement that performs an INSERT, UPDATE, DELETE, or DDL operation and returns the number of affected rows. This method should be used for statements that modify data or perform DDL operations.

4. `addBatch(String sql)`: Adds an SQL statement to the batch for execution. The statements added to the batch can be executed together using the `executeBatch()` method.

5. `executeBatch()`: Executes all the statements added to the batch using the `addBatch()` method and returns an array of integers representing the update counts for each statement.

6. `getResultSet()`: Retrieves the `ResultSet` object generated by the most recent execution of a query. This method is used after executing a SELECT query to retrieve the results.

7. `getUpdateCount()`: Retrieves the update count for the most recent execution of an SQL statement that is not a query. This method is used to get the number of affected rows after executing INSERT, UPDATE, DELETE, or DDL statements.

8. `getGeneratedKeys()`: Retrieves a `ResultSet` object containing the auto-generated keys after executing an INSERT statement with the `Statement.RETURN_GENERATED_KEYS` flag set.

9. `close()`: Closes the statement, releasing any resources associated with it.


Note that the `Statement` interface is extended by the `PreparedStatement` and `CallableStatement` interfaces, which provide additional methods for executing parameterized queries and stored procedures, respectively.

PreparedStatement Interface
-------------------------
setXXX(int columnIndex, XXX)

ResultSet Interface
-------------------
The `ResultSet` interface in JDBC represents a result set obtained from executing an SQL query against a database. It provides methods to navigate through the result set and retrieve data. Here are some commonly used methods of the `ResultSet` class:

1. `next()`: Moves the cursor to the next row in the result set. Returns `true` if there is a next row, `false` otherwise.

2. `getString(int columnIndex)` or `getString(String columnLabel)`: Retrieves the value of the specified column as a `String` from the current row.

3. `getInt(int columnIndex)` or `getInt(String columnLabel)`: Retrieves the value of the specified column as an `int` from the current row.

4. `getDouble(int columnIndex)` or `getDouble(String columnLabel)`: Retrieves the value of the specified column as a `double` from the current row.

5. `getObject(int columnIndex)` or `getObject(String columnLabel)`: Retrieves the value of the specified column as an `Object` from the current row. This method can be used to retrieve values of any data type.

6. `getDate(int columnIndex)` or `getDate(String columnLabel)`: Retrieves the value of the specified column as a `java.sql.Date` object from the current row.

7. `getTime(int columnIndex)` or `getTime(String columnLabel)`: Retrieves the value of the specified column as a `java.sql.Time` object from the current row.

8. `getTimestamp(int columnIndex)` or `getTimestamp(String columnLabel)`: Retrieves the value of the specified column as a `java.sql.Timestamp` object from the current row.

9. `wasNull()`: Returns whether the value retrieved from the last column read was `null`.

10. `close()`: Closes the result set, releasing any resources associated with it.



It's important to note that the cursor of the `ResultSet` starts before the first row, so you need to call `next()` to move to the first row before accessing any data.

